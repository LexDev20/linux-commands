
# list files and subfolders
ls

# multiple path
ls ~ /usr

# list with long format
ls -l

# previous + sorted by modification date
ls -lt

# previous + reverse order in sorting
ls -lt --reverse

# arguments

-a / --all          List all files, even the hidden ones
-A / --almost-all   List all files but the .. and .
-d / --directory    Used to list the directory itself, not its content
-h / --human-readable   Togetith with l will display the file sizes in a human readable way
-l                  Display results with long format
-r / --reverse      Reverse the current order
-S                  Sort by file size
-t                  Sort by modificatiton time


# Fields of long listing format

-rw-rw-r-- 1 lex lex 10647 Apr 27  2024 images.jpeg
drwxr-xr-x 2 lex lex 4096 Apr 17  2024 Desktop

drwxr-xr-x      Access rights to the file.
                The first character could be "d" for a directory, "-" for a regular file and "l" for symbolic links/hard link
                The next 3 characters are the access rights for the file's owner
                The next 3 characters are the access rights for the members of the file's group
                The next 3 characters are the access rights for eveyone else
                r = read permission
                w = write permission
                x = executable permission
                - = permission not set
2               Number of hard links
lex             Name of the file's owner
lex             Name of the group that owns the file
4096            File size in bytes
Apr 17  2024    Date and time of file's last modification
Desktop         Name of the file


# see the filetype of a file and its details
file images.jpeg

# view text files content
less chapter_03.txt

# commands for less

PAGE UP or b            scroll back one page
PAGE DOWN or space      scroll forward one page
Up arrow                scroll up one line
Down arrow              scroll down one line
G                       move to the end of the file
1G or g                 move to the beginning of a text file
/characters             search forward to the next occurrence of "characters"
n                       search fot the next occurrence of the previous search
h                       show the help screen
q                       Quit less


# Wildcards

*                       Matches any character
?                       Matches a single character
[characters]            Matches any character that is a member of the set "characters"
[!characters]           Matches any character that is not a member of the set "characters"
[[:class:]]             Matches any character that is a member of the specified class

# Classes

[:alnum:]               Matches any alphanumeric character
[:alpha:]               Matches any alphabetic character
[:digit:]               Matches any numeral
[:lower:]               Matches any lowercase letter
[:upper:]               Matches any uppercase letter

# Examples

*                       All files
g*                      Any file beginning with g
b*.txt                  Any file beginning with b followed by any characters and ending with .txt
Data???                 Any file beginning with Data followed by exactly 3 characters
[abc]*                  Any file beginnint with a, b or c
BACKUP.[0-9][0-9][0-9]  Any file beginning with BACKUP. followed by exactly 3 numerals
[[:upper:]]*            Any file beginning with an uppercase letter
[![:digit:]]*           Any file not beginning with a numeral
*[[:lower:]123]         Any file endign with a lowercase or the numerals 1, 2 or 3



# mkdir
# mkdir directory...
# The the periods (...) in a command's argument means that the argument can be repeated

# Create a single directory
mkdir dir1

# create multple directories
mkdir dir1 dir2 dir3


# cp
# cp item1 item2
# cp item... directory

# creates a copy of the file a.txt with the name c.txt
cp a.txt c.txt

# copy the files a.txt and b.txt to the directory dir1
cp a.txt b.txt /dir1


# options

-a / --archive          Copy the files and directories and all their attributes, including ownershipt and permissions
                        By default it will take the attributes of the user performing the copy
-i / --interactive      It will prompt the user for a confirmation before overwriting a file. By default it will overwrite files.
-r / --recursive        Recursively copy directories and their contents
-u / --update           Only will copy files that either don't exist or are newer that the existing corresponding files in the destination directory
-v / --verbose          Display informative messages as the copy is performed

# examples

cp dir1/* dir2          Copies all the files in dir1 into dir2
cp -r dir1/* dir2       Copies the content of dir1 into dir2
                        If dir2 does not exist, it is created and will contain the same contents as dir1
                        If dir2 does exist, it will copy dir1 itself (and is contents) into dir2



# mv
# mv item1 item2
# mv item... directory

# options

-i / --interactive      It will prompt the user for a confirmation before overwriting a file. By default it will overwrite files.
-u / --update           Only will move files that either don't exist or are newer that the existing corresponding files in the destination directory
-v / --verbose          Display informative messages as the move is performed

# examples

mv file1 file2          Move file1 to file2
                        If file2 exists, it is overwritten with the content of file1
                        If file2 does not exist, it is created
                        In both cases after the operation, file1 it is deleted
mv file1 file2 dir1     Moves file1 and file2 into dir1
mv dir1 dir2            If dir2 does not exist, create dir2, move the content of dir1 into dir2 and delete dir1
                        If dir2 does exist, move dir1 itsetlf (and its contents) into dir2




# rm
# rm item...

# options

-i / --interactive      It will prompt the user for a confirmation before deleting an existing file. By default it will delete files
-r / --recursive        It is mandatory to delete a directory. Recursively delete directories, if the specified directory has subdirectories it will delete them too
-f / --force            Ignore nonexisting files and continue with the deletion of files and directories, for directories it will need the -r option. This overrides the -i option
-v / --verbose          Display informative messages as the deletion is performed

# examples

rm file1                Delete file1 silently
rm -r file1 dir1        Delete file1 and dir1 and its contents
rm -rf file1 dir1       Same as previous but if either file1 or dir1 does not exist, rm will continue silently


# ln

# create a hard link
# ln file link

# create symbolic link
# ln -s item link



































